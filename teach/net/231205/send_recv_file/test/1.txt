网络编程的重点知识点：
网络通信的基本通信协议 TCP UDP
网络通信的理论知识点 socket套接字 IP地址 端口号 字节序
网络通信的四种IO模型：非阻塞 阻塞 多路复用 信号驱动
网络通信：组播 广播 水位线

一、网络编程
1.网络通信方式
通信的特点：既可以同平台通信，又可以跨平台通信，只要两者之间建立了网络链接
网络通信时，需要借助协议进行链接，保证数据的传输完整
自己Ubuntu -----自己Ubuntu/别人ubuntu

2.协议的概念
从应用的角度出发，协议可以理解为"规则"，是数据传输和数据的解释的规则

按照一定的规则，在发送方发送完成指令之后，接收方能够接收回复ok代表操作完成
无论A和B之间如何传递文件，那么都需要遵守制定的简单协议
所以A和B之间达成相互遵守的规则，我们称之为协议，这种协议称为原始协议
当协议在原始协议之上不算增加、改进、维护，完善最终形成不同的管理协议方式
文件最早使用标准协议是FTP协议，TCP协议注重数据的传输，http协议数据的解释

3.TCP/IP协议
  协议：在不同的计算机里面，双方需要遵守同一个通信协议模式
  TCP/IP协议 传输控制协议/因特网互联协议
  TCP协议：用来检测网络传输中差错的传输协议，传输过程中一旦发现数据错误，就会要求重新传输数据，
  直到数据安全为止。
  IP协议：负责不同网络之间的数据交互
  
4.C/S模型
C/S概念：
C/S是 Client和Server的缩写，就是客户端、服务器模型
例如：QQ\DNF\LOL等需要下载客户端进行数据传输，都是基于C/S模型的一个应用
C/S模型其实是概念层面，实现层面可以基于任何的网络协议
C/S模型的特点：客户端可以有无数个，但是服务器只能有一个，是多对一的的关系

B/S模式：
B/S模型是属于浏览器/服务端的通信模型协议，基于http和https协议
B/S模型的特点：一个浏览器可以请求多个服务器，是一个一对多的关系

优缺点：
对于C/S模型，客户端位于主机上可以保证性能，将数据缓存到客户端本地，从而提高数据传输效率，
且客户端和服务端之间可以采用多种通信协议，可以在标准协议基础上进行裁剪
 因为C/S模型客户端可以提前在本地进行大量数据的缓存处理
 C/S模型使用场景
	要求数据量比较大的时候，需要提前对设备进行缓存
	要求应用程序的稳定性比较高

对于B/S模型，客户端位于网页上，不占用特别多的缓存操作，通过浏览器访问服务端的数据，浏览器获取的时候，
需要获取的时候，需要重新加载服务端

二.网络体系模型
1.模型含义
	模型：指的是主机内部的网络构成和网络协议
	作用：解析接收的数据内容
	
2.网络体系分层模型
网络标准化模型（通信过程分为7层）和TCP/IP模型（分4层）
OSI模型											常见协议
应用层：为应用程序提供服务，获取操作数据		FTP HTTP SMTP DNS等
表示层：数据格式化和数据加密					CSS HTML JSON等
会话层：建立、维护和管理会话					SSH TFTP
传输层：建立、维护和管理两端链接，选择数据传输	TCP UDP
网络层：数据传输线程选择，IP地址和端口选择		IP ICMP IGMP
数据链路层：提供介质访问和链路管理				ARP/RARP/MAC
物理层：以二进制形成在屋里媒介上传递			DSL

TCP/IP模型（分4层）
应用层：主要使用常见协议有HTTP协议和FTP协议
传输层：主要使用常见协议有TCP/UDP协议
网络层：主要使用常见协议有IP协议 ICMP协议 IGMP协议
网络接口层：主要使用常见协议有ARP协议 RARP协议


3.传输协议的分析
TCP协议 （字节流传输协议 打电话）
TCP特点：TCP是一种面向连接的，可靠的传输协议，发送数据保持无丢失
TCP传输的时候的双向需要首先建立连接，之后通过TCP保证数据收发的可靠性
应用：1.适合可靠数据传输，对于安全要求较高的数据
	  2.设置登录账号的时候管理tcp通信模式调整
	  
UDP协议（数据报传输协议 写信）
UDP的特点：UDP是一种面向无连接的，不可靠的传输协议，可能发生数据丢失
UDP传输的时候，无需要建立连接关系，只有读取需要绑定的地址内容
应用：1.网络媒体视频、直播
2.适合用于组播和广播

TCP和UDP的区别
TCP数据流套接字，对网络传输要求比较高，需要稳定传输，每次传输过去需要收到对方的响应，在链接的时候会产生
"三次握手和四次挥手"
TCP的网络拓扑结构属于树型/中心型

UDP数据报套接字，对于网络传输要求不高，由于UDP面向无连接
每次传输过去的数据，由于没有得到对端的响应，所以内容可能会丢失
UDP的网络拓扑结构属于星型/蜂窝型

术语：
SYN 同步位，一般为1，表示请求链接
FIN 取消位，一般为1，表示断开链接

ACK 确认位 ACK=1 确认有效 ACK确认无效
ack 确认号 对方发送序号+1
seq 请求编号 一般为随机号


				TCP										UDP
是否连接		面向连接		    					无连接
是否可靠		可靠的传输，使用字节流控制和阻塞控制	不可靠的传输，不使用流控制和阻塞控制
链接对象个数	只能一对一通信，也可以设置多路复用		支持一对一，一对多，多对一，广播通信
传输方式		面向字节流								面向报文
使用场景		适用于可靠的传输应用，例如：文件		适用于实时应用（视频会议、直播等等）


套接字的概念
Socket概念
Socket本身拥有"插座"的含义，在linux环境下，用于表示进程间网络通信的特殊文件类型。
本质为内核借助于缓冲区形成的伪文件，区别于管道文件，管道文件是用于本地进程间的通信操作，而套接字多
应用于网络进程间数据的传递。

IP地址
IP地址在网络环境中唯一标识的主机地址
如果需要进行网络通信操作，必须要绑定本机的ip地址和本机的端口号
IP地址本质是无符号32位的点分式十进制数
数据源当中必须要包含IP地址，IP地址作为绑定出现的方式为点分式 192.168.2.101

端口号
端口号相当于门牌号，如果双方需要通信，就需要同样的端口号支持，才能建立连接
端口号的大小为unsigned short, 无符号16位，端口号只有整数，范围是从0 到65535

TCP端口：即传输控制协议端口，需要在客户端和服务器之间建立连接，这样可以提供可靠的数据传输
FTP的21端口
Telnet的23端口
SMTP的25端口
HTTP的80端口

UDP端口：即数据报文协议端口，无需在客户端和服务器之间建立连接，安全性得不到保障。
常见的 DNS的53端口，SNMP（简单网络管理协议）的161端口。QQ使用的8000和4000端口。
保留端口：Unix有保留端口号的概念，只有超级用户特权的进程才允许给它自己分配一个保留端口号。
这些端口号介于1~1023之间，一些应用程序将它作为客户与服务器认证一部分。
实际过程中：使用的端口号为1024~65535
	bf 			gf
	5000		5000
	
	
字节序
大端序  低位数据存放在高地址，高位数据存放在低位地址
小端序	低位数据存放在低地址，高位数据存放在高位地址
默认的x86系统和linux系统都属于是小端序ARM平台也是属于小端序
本地字节序：取决于你的操作系统 100.10.168.192
网络字节序：属于大端序数据	   192.168.10.100


htonl, htons, ntohl, ntohs
需要的头文件
#include <arpa/inet.h>
uint32_t htonl(uint32_t hostlong);  //将主机字节序转化到32位的网络字节序

uint16_t htons(uint16_t hostshort); //将主机字节序转化到16位的网络字节序

uint32_t ntohl(uint32_t netlong); //将网络字节序转到32位主机字节序

uint16_t ntohs(uint16_t netshort); //将网络字节序转到16位主机字节序

查看网络命令
ifconfig

重启网卡
sudo ifconfig ens33 down	//关闭
sudo ifconfig ens33 up		//开启

配置网络命令
sudo ifconfig ens33 192.168.2.**

四.TCP通信方式
TCP基本特征
有连接：通信双方需要事先连接成功，才能传输数据
有确认：一方收到对端的任务数据，那么都会给对端发送回执确认
保证数据有序、不重复，如果重复，丢失发送重复的部分
采用帧异步的流方式通信（通信双方每次的收发数据量不必等待）
TCP的通信基于C/S模型实现的操作

TCP通信原理
被动Server：
a.建立TCP连接，创建Socket文件描述符fd(sockfd)，即建立通信端点 Socket
b.绑定套接字文件描述符sockfd与网络地址和端口号，即ip地址+端口号 bind
c.设置套接字进入被动监听状态，即设置套接字的监听 listen
d.等待客户端连接服务器，发起连接请求 accept
e.收到连接请求，获取客户端的连接套接字confd，用于数据的接收和发送 recv/send
f.关闭服务端对象 close

主动client:
a.建立TCP套接字，创建sockfd，即建立通信端点 Socket
b.对服务端发送请求connect，同步配置ip地址和端口
c.请求连接成功，通过套接字sockfd进行数据的接收和发送 recv/send
d.关闭客户端对象 close


注意点：
在Server中，监听套接字和连接套接字严格区分，不可混用
Server所绑定的地址（IP地址+端口号）需要对外公开，否则客户端无法有效连接
Client在发起请求之前一般无需绑定，但是需要配置连接对象的地址（IP地址+端口号）